{"version":3,"sources":["_src/gameOfLife.js","_src/lib.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","getNeighbours","getCartisianProduct","validateNeighbours","remove","getValidNeighbours","contains","list","element","some","e","extractLimits","bounds","topX","topLeft","topY","bottomX","bottomRight","bottomY","getAllCoordinates","limits","allCoordinates","row","column","push","verifyRules","numOfNeighbours","module","exports","nextGeneration","currGeneration","includes","bind","aliveCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","coordinate","value","filter","length","err","return","columnNeighbours","cartisianProduct","index","cell","neighbourCandidates","removeGivenCell","allNeighbours","isValidNeighbour","cellCoordinates","rowNeighbours","reduce","Cell","react_default","a","createElement","width","height","fill","this","props","color","x","col","y","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","i","j","src_Cell","concat","genCells","forEach","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.008440f2.chunk.js","sourcesContent":["const { \n  getCartisianProduct, validateNeighbours,\n  remove, getValidNeighbours, getNeighbours } = require(\"./lib.js\");\n\nconst nextGeneration = function(currGeneration,bounds) {\n  let limits = extractLimits(bounds);\n  let allCoordinates = getAllCoordinates(limits);\n  let includes = contains.bind(null, currGeneration);\n  let aliveCells = [];\n\n  for (let coordinate of allCoordinates) {\n    let neighbours = getNeighbours(coordinate, limits);\n    let numOfNeighbours = neighbours.filter(includes).length;\n    if((numOfNeighbours == 2 && contains(currGeneration, coordinate)) || verifyRules(numOfNeighbours)==1)\n      aliveCells.push(coordinate);\n  }\n  return aliveCells;\n};\n\nconst contains = (list,element) => list.some(e=>e[0]===element[0] && e[1]===element[1]);\n\nconst extractLimits = function(bounds) { \n  return { \n    \"topX\" : bounds.topLeft[0],\n    \"topY\" : bounds.topLeft[1],\n    \"bottomX\" : bounds.bottomRight[0], \n    \"bottomY\" : bounds.bottomRight[1]\n  };\n};\n\nconst getAllCoordinates = function(limits) { \n  let allCoordinates = [];\n  for(let row = limits.topX; row <= limits.bottomX; row++) {\n    for(let column=limits.topY; column <= limits.bottomY ; column++) {\n      allCoordinates.push([row,column]);\n    }\n  }\n  return allCoordinates;\n};\n\nconst verifyRules = function(numOfNeighbours) {\n  if(numOfNeighbours < 2 || numOfNeighbours > 3) {\n    return 0;\n  }\n  if(numOfNeighbours == 3) {\n    return 1;\n  }\n};\n\nmodule.exports = { nextGeneration };\n","const getCartisianProduct = function(columnNeighbours) {\n  return function(cartisianProduct, element) {\n    for(let index = 0; index < columnNeighbours.length; index++) {\n      cartisianProduct.push([element, columnNeighbours[index]]);\n    }\n    return cartisianProduct; \n  }\n};\n\nconst validateNeighbours = function(limits) { \n  return function (element) { \n    return ! ( element.some( (element => (element < limits.topX && element < limits.topY) || (element > limits.bottomX && element > limits.bottomY) ) ) )\n  };\n};\n\nconst remove = function(cell) { \n  return function (element) { \n    return !( element[0] == cell[0] && element[1] == cell[1] )\n  };\n};\n\nconst getValidNeighbours = function(cell, neighbourCandidates,limits) { \n  let removeGivenCell = remove(cell);\n  let allNeighbours = neighbourCandidates.filter(removeGivenCell);\n  let isValidNeighbour = validateNeighbours(limits);\n  return allNeighbours.filter(isValidNeighbour);\n};\n\nconst getNeighbours = function(cellCoordinates,limits) {\n  let rowNeighbours = [ cellCoordinates[0]-1, cellCoordinates[0], cellCoordinates[0]+1 ];\n  let columnNeighbours = [ cellCoordinates[1]-1, cellCoordinates[1], cellCoordinates[1]+1 ];\n  let cartisianProduct= getCartisianProduct(columnNeighbours);\n  let neighbourCandidates = rowNeighbours.reduce(cartisianProduct,[]);\n  let neighbours = getValidNeighbours(cellCoordinates, neighbourCandidates,limits);\n  return neighbours;\n};\n\nmodule.exports = { \n  getCartisianProduct, validateNeighbours, \n  remove, getValidNeighbours, getNeighbours\n};\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}